{"version":3,"sources":["components/Templates.jsx","components/MemeGenerator.jsx","components/Meme.jsx","App.jsx","index.js"],"names":["MemeImage","styled","div","props","url","Templates","templates","setMeme","map","template","className","onClick","id","GenerateMeme","form","meme","params","Object","keys","key","boxurl","boxes","forEach","index","encodeURIComponent","text","join","length","box_count","fetch","method","headers","body","then","res","json","resData","data","Meme","useState","template_id","username","password","setForm","src","alt","Array","_","type","placeholder","onChange","e","newBoxes","target","value","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEMA,EAAYC,IAAOC,IAAV,qHACK,SAACC,GAAD,OAAWA,EAAMC,OAuBtBC,MAlBf,YAA4C,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAC9B,OACE,+BACGD,EAAUE,KAAI,SAACC,GAAD,OACb,qBAEEC,UAAU,gBACVC,QAAS,WACPJ,EAAQE,IAJZ,SAOE,cAACT,EAAD,CAAWI,IAAKK,EAASL,OANpBK,EAASG,U,eC6BTC,MA1Cf,YAAgD,IAAxBC,EAAuB,EAAvBA,KAAMP,EAAiB,EAAjBA,QAASQ,EAAQ,EAARA,KAC/BC,EAASC,OAAOC,KAAKJ,GACxBN,KAAI,SAACW,GACJ,GAAY,UAARA,EAAiB,CACnB,IAAIC,EAAS,GAQb,OAPAH,OAAOC,KAAKJ,EAAKO,OAAOC,SAAQ,SAACC,GAC/BH,GACE,UACAI,mBAAmBD,GACnB,WACAC,mBAAmB,CAACV,EAAKO,MAAME,GAAOE,UAEnCL,EAEP,OAAOI,mBAAmBL,GAAO,IAAMK,mBAAmBV,EAAKK,OAGlEO,KAAK,KACR,OACE,wBACEf,QAAS,WACP,GAAIG,EAAKO,MAAMM,SAAWZ,EAAKa,UAAW,OAAO,KACjDC,MAAM,wCAAyC,CAC7CC,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBC,KAAMhB,IAELiB,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL7B,EAAQ,2BAAKQ,GAAN,IAAYX,IAAKgC,EAAQC,KAAKjC,WAd7C,4BCsBWkC,MAtCf,YAAkC,IAAlBvB,EAAiB,EAAjBA,KAAMR,EAAW,EAAXA,QACpB,EAAwBgC,mBAAS,CAC/BC,YAAazB,EAAKH,GAClB6B,SAAU,YACVC,SAAU,iBACVrB,MAAO,KAJT,mBAAOP,EAAP,KAAa6B,EAAb,KAMA,OACE,sBAAKjC,UAAU,OAAf,UACE,qBAAKkC,IAAK7B,EAAKX,IAAKyC,IAAI,KACxB,qBAAKnC,UAAU,oBAAf,SACG,YAAIoC,MAAM/B,EAAKa,YAAYpB,KAAI,SAACuC,EAAGxB,GAAJ,OAC9B,uBAEEyB,KAAK,OACLC,YAAW,uBAAkB1B,EAAQ,GACrC2B,SAAU,SAACC,GACT,IAAMC,EAAWtC,EAAKO,MACtB+B,EAAS7B,GAAS,CAAEE,KAAM0B,EAAEE,OAAOC,OACnCX,EAAQ,2BAAK7B,GAAN,IAAYO,MAAO+B,OANvB7B,QAWX,sBAAKb,UAAU,mBAAf,UACE,cAAC,EAAD,CAAcI,KAAMA,EAAMP,QAASA,EAASQ,KAAMA,IAClD,wBACEJ,QAAS,WACPJ,EAAQ,OAFZ,oCCFOgD,MAtBf,WACE,MAAkChB,mBAAS,IAA3C,mBAAOjC,EAAP,KAAkBkD,EAAlB,KACA,EAAwBjB,mBAAS,MAAjC,mBAAOxB,EAAP,KAAaR,EAAb,KAQA,OAPAkD,qBAAU,WACR5B,MAAM,qCACHI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACI,GACLmB,EAAanB,EAAKA,KAAKqB,YAE1B,IAED,sBAAKhD,UAAU,MAAf,UACE,gDACU,OAATK,EACC,cAAC,EAAD,CAAWT,UAAWA,EAAWC,QAASA,GAAa,YAEvD,cAAC,EAAD,CAAMQ,KAAMA,EAAMR,QAASA,QCjBnCoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9ef096e4.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst MemeImage = styled.div`\r\n  background: url(${(props) => props.url});\r\n  background-size: 100% 100%;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nfunction Templates({ templates, setMeme }) {\r\n  return (\r\n    <main>\r\n      {templates.map((template) => (\r\n        <div\r\n          key={template.id}\r\n          className=\"meme-template\"\r\n          onClick={() => {\r\n            setMeme(template);\r\n          }}\r\n        >\r\n          <MemeImage url={template.url} />\r\n        </div>\r\n      ))}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Templates;\r\n","function GenerateMeme({ form, setMeme, meme }) {\r\n  const params = Object.keys(form)\r\n    .map((key) => {\r\n      if (key === \"boxes\") {\r\n        let boxurl = \"\";\r\n        Object.keys(form.boxes).forEach((index) => {\r\n          boxurl +=\r\n            \"&boxes[\" +\r\n            encodeURIComponent(index) +\r\n            \"][text]=\" +\r\n            encodeURIComponent([form.boxes[index].text]);\r\n        });\r\n        return boxurl;\r\n      } else {\r\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(form[key]);\r\n      }\r\n    })\r\n    .join(\"&\");\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        if (form.boxes.length !== meme.box_count) return null;\r\n        fetch(\"https://api.imgflip.com/caption_image\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          body: params,\r\n        })\r\n          .then((res) => {\r\n            return res.json();\r\n          })\r\n          .then((resData) => {\r\n            setMeme({ ...meme, url: resData.data.url });\r\n          });\r\n      }}\r\n    >\r\n      Generate Meme\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default GenerateMeme;\r\n","import { useState } from \"react\";\r\nimport GenerateMeme from \"./MemeGenerator\";\r\n\r\nfunction Meme({ meme, setMeme }) {\r\n  const [form, setForm] = useState({\r\n    template_id: meme.id,\r\n    username: \"RitikGour\",\r\n    password: \"ImageFlip@1234\",\r\n    boxes: [],\r\n  });\r\n  return (\r\n    <div className=\"meme\">\r\n      <img src={meme.url} alt=\"\" />\r\n      <div className=\"caption-container\">\r\n        {[...Array(meme.box_count)].map((_, index) => (\r\n          <input\r\n            key={index}\r\n            type=\"text\"\r\n            placeholder={`Meme Caption ${index + 1}`}\r\n            onChange={(e) => {\r\n              const newBoxes = form.boxes;\r\n              newBoxes[index] = { text: e.target.value };\r\n              setForm({ ...form, boxes: newBoxes });\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <GenerateMeme form={form} setMeme={setMeme} meme={meme} />\r\n        <button\r\n          onClick={() => {\r\n            setMeme(null);\r\n          }}\r\n        >\r\n          Choose Template\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meme;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Templates from \"./components/Templates\";\nimport Meme from \"./components/Meme\";\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTemplates(data.data.memes);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <header>Meme Maker</header>\n      {meme === null ? (\n        <Templates templates={templates} setMeme={setMeme} key=\"template\" />\n      ) : (\n        <Meme meme={meme} setMeme={setMeme} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}